on:
  push:
    tags:
      - "v*"

jobs:
  export_game:
    runs-on: ubuntu-latest
    permissions: write-all
    name: Export Game
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0

      - name: Get Tag Name
        id: get_tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Check Existing Release
        id: check_release
        run: |
          RELEASE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.TAG_NAME }}")
          if [ -z "$RELEASE" ]; then
            echo "RELEASE_NOT_EXIST"
          else
            echo "RELEASE_EXIST"
          fi
        shell: bash

      - name: Export Game
        id: export
        uses: firebelley/godot-export@v5.2.0
        with:
          godot_executable_download_url: http://downloads.tuxfamily.org/godotengine/4.2.1/Godot_v4.2.1-stable_linux.x86_64.zip
          godot_export_templates_download_url: http://downloads.tuxfamily.org/godotengine/4.2.1/Godot_v4.2.1-stable_export_templates.tpz
          relative_project_path: ./
          archive_output: true

      - name: Create Release
        run: |
          if [ "${{ steps.check_release.outputs.RELEASE_NOT_EXIST }}" == "RELEASE_NOT_EXIST" ]; then
            gh release create "${{ env.TAG_NAME }}" --repo="${{ github.repository }}" --title="${{ github.repository_name }} ${{ env.TAG_NAME#v }}" --generate-notes
          else
            echo "Release with tag '${{ env.TAG_NAME }}' already exists."
          fi
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
